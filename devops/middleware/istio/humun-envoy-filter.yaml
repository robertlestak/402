apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: 402-auth
  namespace: humun-client-svcs
spec:
  workloadSelector:
    labels:
      402.sh/enabled: "true"
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
            subFilter:
              name: "envoy.filters.http.router"
    patch:
      operation: INSERT_BEFORE
      value:
       name: envoy.lua
       typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
          inlineCode: |
            function strSplit(i, d)
              if d == nil then
                d = "%s"
              end
              local t={}
              for s in string.gmatch(i, "([^"..d.."]+)") do
                table.insert(t, s)
              end
              return t
            end
            function table.contains(table, element)
              for _, value in pairs(table) do
                if value == element then
                  return true
                end
              end
              return false
            end
            function envoy_on_request(request_handle)
              local forward_headers = { "x-402-token" }
              local path = request_handle:headers():get(":path")
              -- ignore metrics, liveness probe requests
              if path == "/health" or path == "/metrics" then
                return
              end
              token = request_handle:headers():get("x-402-token")
              hd = request_handle:headers()
              c = hd:get("cookie")
              if c ~= nil and token == nil then
                sc = strSplit(c, ";")
                jwt = nil
                for i, ci in ipairs(sc) do
                  if string.find(ci, "402_token") ~= nil then
                    jwt = string.gsub(ci, "402_token=", "")
                  end
                end
                if jwt ~= nil then
                  j = string.gsub(jwt, "^ ", "")
                  token = j
                end
              end
              request_handle:logInfo("validating token against 402-service")
              local streamInfo = request_handle:streamInfo()
              local certs = streamInfo:downstreamSslConnection():uriSanPeerCertificate()
              local h402sa = "spiffe://cluster.local/ns/humun-client-svcs/sa/hpay"
              local internalHumunClient = "spiffe://cluster.local/ns/humun-core/sa/default"
              for header, value in pairs(certs) do
                request_handle:logInfo("client cert "..value)
              end
              if table.contains(certs, h402sa) or table.contains(certs, internalHumunClient) then
                request_handle:logInfo("402 SA found, return")
                return
              end
              request_handle:logInfo("calling 402 auth service")
              local headers, body = request_handle:httpCall(
                "outbound|80||hpay.humun-client-svcs.svc.cluster.local",
                {
                  [":method"] = "GET",
                  [":authority"] = request_handle:headers():get(":authority"),
                  [":path"] = "/v1/_402?resource="..path,
                  ["x-402-token"] = token,
                  ["x-402-host"] = request_handle:headers():get("host"),
                  ["x-402-signature"] = request_handle:headers():get("x-402-signature"),
                  ["x-402-tenant"] = "",
                  ["cookie"] = c
                },
                nil,
                5000)
              local status
              for header, value in pairs(headers) do
                if header == ":status" then
                  status = value
                end

                for i, f_h in ipairs(forward_headers) do
                  if header ==  f_h then
                    request_handle:logInfo("Adding header to response:"..header)
                    request_handle:headers():add(header, value)
                  end
                end

              end

              request_handle:logInfo("token validation status:"..status)
          
              if status ~= "200" then
                request_handle:respond(headers,body)
              end
            end